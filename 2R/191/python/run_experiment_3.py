###############################################################################
# User specified variables to deterimine which model configuration to use
# and which experiment to run.
###############################################################################

# Specify the model configuration file name
model_configuration_file_name: str = "configuration.csv"

# Specify the name of the experiment directory
# (located in the model's simulations directory)
experiment_directory_name: str = "experiment_3"

# Specify the name of the experiment design file
experiment_design_file_name: str = "design.csv"

###############################################################################
# Experiment customisation typically ends here.
#
# See the end of the script to customise the generation of results.
###############################################################################

import pickle
from pathlib import Path
from gcubed.model_configuration import ModelConfiguration
from gcubed.projections.baseline_projections import BaselineProjections
from gcubed.runners.simulation_runner import SimulationRunner
from gcubed import configure_logging
from gcubed.reporting import experiment_results_folder, generate_all_simulation_results
from gcubed.projections.derivations import Derivations
from gcubed.projections.derivation_definitions import (
    growth_rates,
)

# Get the name of this script - to use when setting up the results storage directory.
experiment_script_name: str = Path(__file__).name

# Get the root directory for the model, relative to this script.
model_directory_path: Path = Path(__file__).resolve().parent.parent

# Get the path to the model configuration file.
model_configuration_file_path: Path = (
    model_directory_path / model_configuration_file_name
)

# Check that the model configuration file exists.
assert (
    model_configuration_file_path.exists()
), f"Model configuration file not found at {model_configuration_file_path}"

# Get the path to the directory where all experiment results are stored for this devcontainer.
root_results_directory_path: Path = model_directory_path.parent.parent / "results"

# Load the model configuration
model_configuration: ModelConfiguration = ModelConfiguration(
    configuration_file=model_configuration_file_path
)

# Determine where the results will be saved.
results_folder: str = experiment_results_folder(
    configuration=model_configuration,
    root_results_directory_path=root_results_directory_path,
    experiment_script_name=experiment_script_name,
)

# Set up logging
configure_logging(folder=results_folder)

# Load the previously saved baseline projections.
baseline_projections_pickle_file: Path = results_folder / "baseline_projections.pickle"
assert (
    baseline_projections_pickle_file.exists()
), f"Baseline projections pickle file not found at {baseline_projections_pickle_file}"
with open(baseline_projections_pickle_file, "rb") as file:
    baseline_projections: BaselineProjections = pickle.load(file)

# Set up the simulation runner.
runner: SimulationRunner = SimulationRunner(
    baseline_projections=baseline_projections,
    experiment_design_file=f"{experiment_directory_name}/{experiment_design_file_name}",
)

# Run the simulation experiment.
runner.run()

###############################################################################
# Adjust the following parameters to use different chart packs or
# report documentation or templates.
#
# The chartpack path is the location of the chartpack CSV file,
# typically stored either in the model's chartpack
# directory or in the experiment directory.
#
# The documentation path is the location of the Markdown documentation file
# explaining the experiment details, typically stored in the model's
# experiment directory.
#
# The template path is the location of the HTML template file
# used to generate the chartpack, typically stored in the model's
# chartpacks directory.
#
# The list of all projections is typically the list of all projections
# generated by the simulation runne, one for the baseline and one for
# each simulation layer.
#
# The derivations are the derived variables that are required for the experiment.
#
# The show_final_results flag determines whether the final results are displayed
# in your web browser. If shown, these are the deviations between the final
# simulation layer and the baseline projections.
###############################################################################

derivations: Derivations = Derivations(sym_data=runner.model.sym_data)
derivations.add(derivation=growth_rates.GDPRGROWTH())

generate_all_simulation_results(
    chartpack_path=model_configuration.simulations_directory
    / experiment_directory_name
    / "chartpack.csv",
    documentation_path=model_configuration.simulations_directory
    / experiment_directory_name
    / "documentation.md",
    template_path=model_configuration.chartpacks_directory / "chart-template.html",
    results_directory_path=results_folder,
    all_projections=runner.all_projections,
    derivations=derivations,
    show_final_results=True,
)
